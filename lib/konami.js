// Generated by CoffeeScript 1.6.3
(function() {
  var Sequence, default_sequence, dewhitespace,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  default_sequence = 'up, up, down, down, left, right, left, right, B, A';

  this.KonamiCode = (function() {
    function KonamiCode(callback, keys_text) {
      this.callback = callback;
      if (keys_text == null) {
        keys_text = default_sequence;
      }
      this.sequence = __bind(this.sequence, this);
      this.listen = __bind(this.listen, this);
      this.seq = new Sequence(keys_text.split(','));
      this.key_index = 0;
      this.add_listener();
    }

    KonamiCode.prototype.add_listener = function() {
      if (typeof document !== "undefined" && document !== null ? document.addEventListener : void 0) {
        return document.addEventListener('keydown', this.listen);
      } else if (typeof document !== "undefined" && document !== null ? document.attachEvent : void 0) {
        return document.attachEvent('keydown', this.listen);
      }
    };

    KonamiCode.prototype.listen = function(event) {
      var code;
      code = event.which || event.keyCode || event;
      if (this.seq.current() === code) {
        this.seq.next();
      } else {
        this.seq.reset();
      }
      if (this.seq.is_last()) {
        this.seq.reset();
        return this.callback();
      }
    };

    KonamiCode.prototype.sequence = function() {
      return this.seq.codes;
    };

    return KonamiCode;

  })();

  Sequence = (function() {
    function Sequence(key_names) {
      var name;
      this.codes = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = key_names.length; _i < _len; _i++) {
          name = key_names[_i];
          _results.push(Sequence.map(name));
        }
        return _results;
      })();
      this.key_index = 0;
    }

    Sequence.prototype.current = function() {
      return this.codes[this.key_index];
    };

    Sequence.prototype.reset = function() {
      this.key_index = 0;
      return this.current();
    };

    Sequence.prototype.next = function() {
      return this.key_index++;
    };

    Sequence.prototype.is_last = function() {
      return this.key_index >= this.codes.length;
    };

    Sequence.map = function(name) {
      name = dewhitespace(name).toUpperCase();
      if (name.length === 1) {
        return name.charCodeAt(0);
      } else {
        switch (name) {
          case 'UP':
            return 38;
          case 'DOWN':
            return 40;
          case 'LEFT':
            return 37;
          case 'RIGHT':
            return 39;
          case 'ENTER':
            return 13;
        }
      }
    };

    return Sequence;

  })();

  dewhitespace = function(text) {
    return text.replace(/\s+/g, '');
  };

}).call(this);
